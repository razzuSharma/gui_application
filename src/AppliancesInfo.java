/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;


/**
 *
 * @author saugatdhakal
 */
public class AppliancesInfo extends javax.swing.JFrame {

    /**
     * Creates new form AppliancesInfo
     */
    private String range;
    ArrayList<RegisterData> list = new ArrayList();
    ArrayList<String> categoryList = new ArrayList<String>();
    ArrayList<String> rangeList = new ArrayList<String>();
    private String searchRange;
    boolean open=true;
    boolean insert =true;
    
    public AppliancesInfo() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rangeGroup = new javax.swing.ButtonGroup();
        searchRangeGroup = new javax.swing.ButtonGroup();
        wholeGUIpanel = new javax.swing.JPanel();
        seachByCategoryPanel = new javax.swing.JPanel();
        searchCategoryBox = new javax.swing.JComboBox<>();
        categorySearchBTN = new javax.swing.JButton();
        searchByPricePanel = new javax.swing.JPanel();
        priceSearchField = new javax.swing.JTextField();
        priceSearchBtn = new javax.swing.JButton();
        JTablePanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vehicleTable = new javax.swing.JTable();
        vehicleEntryPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        vehicleCCLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        vehicleCCField = new javax.swing.JTextField();
        vehicleNameField = new javax.swing.JTextField();
        highRange = new javax.swing.JRadioButton();
        VehicleIDLabel = new javax.swing.JLabel();
        lowRange = new javax.swing.JRadioButton();
        vehicleCategory = new javax.swing.JComboBox<>();
        mediumRange = new javax.swing.JRadioButton();
        vehicleIdField = new javax.swing.JTextField();
        addVehicleEntryBtn = new javax.swing.JButton();
        vehiclePriceField = new javax.swing.JTextField();
        CategoryLabel = new javax.swing.JLabel();
        ClearBtn = new javax.swing.JButton();
        VehicleNameLabel = new javax.swing.JLabel();
        searchByRangePanel = new javax.swing.JPanel();
        searchHighRadio = new javax.swing.JRadioButton();
        rangeSearchBtn = new javax.swing.JButton();
        searchLowRadio = new javax.swing.JRadioButton();
        searchMediumRadio = new javax.swing.JRadioButton();
        fileMainMenu = new javax.swing.JMenuBar();
        openMenuItem = new javax.swing.JMenu();
        openMenuItems = new javax.swing.JMenuItem();
        exitMenuIteam = new javax.swing.JMenuItem();
        helpMainMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vehicle Registration");
        setBackground(new java.awt.Color(44, 62, 80));
        setBounds(new java.awt.Rectangle(150, 155, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(380, 135));
        setPreferredSize(new java.awt.Dimension(1030, 910));
        setResizable(false);
        getContentPane().setLayout(null);

        wholeGUIpanel.setBackground(new java.awt.Color(44, 62, 80));
        wholeGUIpanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        wholeGUIpanel.setFont(new java.awt.Font("Times New Roman", 1, 13)); // NOI18N
        wholeGUIpanel.setMinimumSize(new java.awt.Dimension(1070, 790));
        wholeGUIpanel.setPreferredSize(new java.awt.Dimension(1070, 870));

        seachByCategoryPanel.setBackground(new java.awt.Color(44, 62, 80));
        seachByCategoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(248, 148, 6))); // NOI18N

        searchCategoryBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bike", "Car", "Truck", "Bus", "Scooter" }));

        categorySearchBTN.setBackground(new java.awt.Color(34, 167, 240));
        categorySearchBTN.setText("Search");
        categorySearchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categorySearchBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout seachByCategoryPanelLayout = new javax.swing.GroupLayout(seachByCategoryPanel);
        seachByCategoryPanel.setLayout(seachByCategoryPanelLayout);
        seachByCategoryPanelLayout.setHorizontalGroup(
            seachByCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seachByCategoryPanelLayout.createSequentialGroup()
                .addGroup(seachByCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(seachByCategoryPanelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(categorySearchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(seachByCategoryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchCategoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        seachByCategoryPanelLayout.setVerticalGroup(
            seachByCategoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seachByCategoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchCategoryBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(categorySearchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchByPricePanel.setBackground(new java.awt.Color(44, 62, 80));
        searchByPricePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(248, 148, 6))); // NOI18N

        priceSearchBtn.setBackground(new java.awt.Color(34, 167, 240));
        priceSearchBtn.setText("Search");
        priceSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchByPricePanelLayout = new javax.swing.GroupLayout(searchByPricePanel);
        searchByPricePanel.setLayout(searchByPricePanelLayout);
        searchByPricePanelLayout.setHorizontalGroup(
            searchByPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchByPricePanelLayout.createSequentialGroup()
                .addComponent(priceSearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(searchByPricePanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchByPricePanelLayout.setVerticalGroup(
            searchByPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchByPricePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(priceSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        JTablePanel.setBackground(new java.awt.Color(44, 62, 80));

        jPanel5.setBackground(new java.awt.Color(44, 62, 80));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(248, 148, 6))); // NOI18N

        vehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Vehicle ID", "Vehicle Name", "Vehicle CC", "Category", "Price", "Range"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vehicleTable);
        if (vehicleTable.getColumnModel().getColumnCount() > 0) {
            vehicleTable.getColumnModel().getColumn(0).setResizable(false);
            vehicleTable.getColumnModel().getColumn(2).setResizable(false);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 979, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout JTablePanelLayout = new javax.swing.GroupLayout(JTablePanel);
        JTablePanel.setLayout(JTablePanelLayout);
        JTablePanelLayout.setHorizontalGroup(
            JTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        JTablePanelLayout.setVerticalGroup(
            JTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JTablePanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        vehicleEntryPanel.setBackground(new java.awt.Color(44, 62, 80));
        vehicleEntryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Entry ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(248, 148, 6))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Price:");

        vehicleCCLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        vehicleCCLabel.setForeground(new java.awt.Color(255, 255, 255));
        vehicleCCLabel.setText("Vehicle CC:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Range:");

        rangeGroup.add(highRange);
        highRange.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        highRange.setForeground(new java.awt.Color(255, 255, 255));
        highRange.setText("High");
        highRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highRangeActionPerformed(evt);
            }
        });

        VehicleIDLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        VehicleIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        VehicleIDLabel.setText("Vehicle ID:");

        rangeGroup.add(lowRange);
        lowRange.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lowRange.setForeground(new java.awt.Color(255, 255, 255));
        lowRange.setText("Low");
        lowRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowRangeActionPerformed(evt);
            }
        });

        vehicleCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bike", "Car", "Truck", "Bus", "Scooter" }));

        rangeGroup.add(mediumRange);
        mediumRange.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        mediumRange.setForeground(new java.awt.Color(255, 255, 255));
        mediumRange.setText("Medium");
        mediumRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumRangeActionPerformed(evt);
            }
        });

        addVehicleEntryBtn.setBackground(new java.awt.Color(34, 167, 240));
        addVehicleEntryBtn.setText("Add");
        addVehicleEntryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVehicleEntryBtnActionPerformed(evt);
            }
        });

        CategoryLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CategoryLabel.setForeground(new java.awt.Color(255, 255, 255));
        CategoryLabel.setText("Category:");

        ClearBtn.setBackground(new java.awt.Color(255, 102, 102));
        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        VehicleNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        VehicleNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        VehicleNameLabel.setText("Vehicle Name:");

        javax.swing.GroupLayout vehicleEntryPanelLayout = new javax.swing.GroupLayout(vehicleEntryPanel);
        vehicleEntryPanel.setLayout(vehicleEntryPanelLayout);
        vehicleEntryPanelLayout.setHorizontalGroup(
            vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleEntryPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vehicleCCLabel)
                    .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6))
                    .addComponent(CategoryLabel)
                    .addComponent(VehicleNameLabel)
                    .addComponent(VehicleIDLabel))
                .addGap(18, 18, 18)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vehicleCCField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vehicleNameField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vehicleEntryPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vehiclePriceField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vehicleCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(vehicleIdField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vehicleEntryPanelLayout.createSequentialGroup()
                        .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vehicleEntryPanelLayout.createSequentialGroup()
                                .addComponent(addVehicleEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vehicleEntryPanelLayout.createSequentialGroup()
                                .addComponent(highRange)
                                .addGap(12, 12, 12)
                                .addComponent(mediumRange)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowRange)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        vehicleEntryPanelLayout.setVerticalGroup(
            vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vehicleEntryPanelLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehicleIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VehicleIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VehicleNameLabel)
                    .addComponent(vehicleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CategoryLabel)
                    .addComponent(vehicleCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vehicleCCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vehicleCCLabel))
                .addGap(18, 18, 18)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(vehiclePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mediumRange)
                    .addComponent(lowRange)
                    .addComponent(highRange)
                    .addComponent(jLabel6))
                .addGap(35, 35, 35)
                .addGroup(vehicleEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addVehicleEntryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        searchByRangePanel.setBackground(new java.awt.Color(44, 62, 80));
        searchByRangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search By Range", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18), new java.awt.Color(248, 148, 6))); // NOI18N

        searchRangeGroup.add(searchHighRadio);
        searchHighRadio.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchHighRadio.setForeground(new java.awt.Color(255, 255, 255));
        searchHighRadio.setText("High");
        searchHighRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchHighRadioActionPerformed(evt);
            }
        });

        rangeSearchBtn.setBackground(new java.awt.Color(34, 167, 240));
        rangeSearchBtn.setText("Search");
        rangeSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeSearchBtnActionPerformed(evt);
            }
        });

        searchRangeGroup.add(searchLowRadio);
        searchLowRadio.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchLowRadio.setForeground(new java.awt.Color(255, 255, 255));
        searchLowRadio.setText("Low");
        searchLowRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchLowRadioActionPerformed(evt);
            }
        });

        searchRangeGroup.add(searchMediumRadio);
        searchMediumRadio.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchMediumRadio.setForeground(new java.awt.Color(255, 255, 255));
        searchMediumRadio.setText("Medium");
        searchMediumRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMediumRadioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchByRangePanelLayout = new javax.swing.GroupLayout(searchByRangePanel);
        searchByRangePanel.setLayout(searchByRangePanelLayout);
        searchByRangePanelLayout.setHorizontalGroup(
            searchByRangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchByRangePanelLayout.createSequentialGroup()
                .addGroup(searchByRangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchByRangePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rangeSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchByRangePanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(searchHighRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(searchMediumRadio)))
                .addGap(32, 32, 32)
                .addComponent(searchLowRadio)
                .addGap(21, 21, 21))
        );
        searchByRangePanelLayout.setVerticalGroup(
            searchByRangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchByRangePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchByRangePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchHighRadio)
                    .addComponent(searchMediumRadio)
                    .addComponent(searchLowRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(rangeSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout wholeGUIpanelLayout = new javax.swing.GroupLayout(wholeGUIpanel);
        wholeGUIpanel.setLayout(wholeGUIpanelLayout);
        wholeGUIpanelLayout.setHorizontalGroup(
            wholeGUIpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(vehicleEntryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(wholeGUIpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(searchByPricePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seachByCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(searchByRangePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                .addComponent(JTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        wholeGUIpanelLayout.setVerticalGroup(
            wholeGUIpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                .addComponent(JTablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(wholeGUIpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vehicleEntryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(44, Short.MAX_VALUE))
                    .addGroup(wholeGUIpanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(wholeGUIpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seachByCategoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchByPricePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchByRangePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62))))
        );

        getContentPane().add(wholeGUIpanel);
        wholeGUIpanel.setBounds(0, 0, 1070, 860);
        wholeGUIpanel.getAccessibleContext().setAccessibleDescription("");

        openMenuItem.setText("File");

        openMenuItems.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItems.setText("Open");
        openMenuItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemsActionPerformed(evt);
            }
        });
        openMenuItem.add(openMenuItems);

        exitMenuIteam.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenuIteam.setText("Exit");
        exitMenuIteam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuIteamActionPerformed(evt);
            }
        });
        openMenuItem.add(exitMenuIteam);

        fileMainMenu.add(openMenuItem);

        helpMainMenu.setText("Help");
        helpMainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMainMenuMouseClicked(evt);
            }
        });
        fileMainMenu.add(helpMainMenu);

        setJMenuBar(fileMainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // This function will run when user click the open menu items from menu file which pass into next function for adding data into table//
    private void openMenuItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemsActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        loadFile();
    }//GEN-LAST:event_openMenuItemsActionPerformed

    private void loadFile(){// This function will load the csv file data and pass the data to addToTable function for adding data into table//
        try{
            if(open){/*Checking whether file is imported more then once*/
            if(insert){
            BufferedReader r = new BufferedReader(new FileReader("RegisterData.csv"));
            String row="";
            while((row=r.readLine())!=null){
                String[] value = row.split(",");
                addToTable(value);
                
            }
            JOptionPane.showMessageDialog(rootPane, "Sucessfully imported File", "File Import Sucessfull", 1);
            open=false;
            }else{
                JOptionPane.showMessageDialog(rootPane, "Once Value is inserted into new file Old file can't be imported", "File Import Error", 0);
            }
            }else{
                JOptionPane.showMessageDialog(rootPane, "File can be only imported once", "File Import Error", 0);
            }
        }catch(FileNotFoundException e){
        }catch(IOException e){}
    }
    //Close the GUI when user click exit menu item exit//
    private void exitMenuIteamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuIteamActionPerformed
        // TODO add your handling code here:
         System.exit(0);
         
    }//GEN-LAST:event_exitMenuIteamActionPerformed
    //High sentence place into range String when user select high radioButton
    private void highRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highRangeActionPerformed
        // TODO add your handling code here:
        range = "High";
    }//GEN-LAST:event_highRangeActionPerformed
    //Value is added into the table when user click add button from Vehicle Entry Panel 
    private void addVehicleEntryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVehicleEntryBtnActionPerformed
        try{
        //Getting values from JTable
        String vehicleId= vehicleIdField.getText().trim();
        String vehicleName = vehicleNameField.getText().trim();
        String category = vehicleCategory.getSelectedItem().toString().trim();
        String vehicleCC = vehicleCCField.getText().trim();
        String vehiclePrice = vehiclePriceField.getText().trim();
        String vehicleRange = range;
        NumberToWords num = new NumberToWords();
        
        //Checking whether TextField values of vehicle entry panel is empty or not// 
        if (!vehicleId.trim().isEmpty() && !vehicleName.trim().isEmpty() && !category.trim().isEmpty() && !vehicleCC.trim().isEmpty() && !vehiclePrice.trim().isEmpty()){
            if(highRange.isSelected() || lowRange.isSelected() || mediumRange.isSelected()){//Checking whether any one range is selected or not//
                for(RegisterData r:list){//Checking the vechile id whether it is unique or not//
                    if(vehicleId.equals(r.getVehicleId())){
                        Toolkit.getDefaultToolkit().beep();//Sound beep if the this line out code run
                        JOptionPane.showMessageDialog(rootPane, "Id match with other! Fill Unique Id", "Vehicle Entry", 0);
                        return;
                    }}
                if(Integer.parseInt(vehicleCC)>0 && Integer.parseInt(vehiclePrice)>0 && Integer.parseInt(vehicleId)>0){//Checking whether value is negative or not//
                    if(Pattern.compile("\\b[0-9]+\\b").matcher(vehicleId).matches()){//Checking whether entered values is integer or not from regex// 
                        if(Pattern.compile("\\b[0-9]+\\b").matcher(vehiclePrice).matches()){
                            if(Pattern.compile("\\b[0-9]+\\b").matcher(vehicleCC).matches()){
                               
                                if(highRange.isSelected()){// if user select range high radio buttom  this fuction //
                                    if(Integer.parseInt(vehiclePrice)>=500000){/*Checking condition where high should be higher then 500000*/
                                        String info[] ={vehicleId,vehicleName,vehicleCC,category,vehiclePrice,vehicleRange};
                                        addToTable(info);/*Calling a function for adding into the table and into csv file*/
                                        ClearBtnActionPerformed(evt);/*Calling a function for clearing the textField*/
                                        JOptionPane.showMessageDialog(rootPane, " Registered Sucessfull", "Vehicle Entry", 1);
                                    }else{
                                        Toolkit.getDefaultToolkit().beep();
                                        JOptionPane.showMessageDialog(rootPane, " High Range Vechile should have Price Greater Then"+num.convert(500000), "Vehicle Entry Error", 0);
                                        return;
                                    }}

                                    if(mediumRange.isSelected()){// if user select range medium radio buttom  this fuction //
                                        if(Integer.parseInt(vehiclePrice)>=200000 && Integer.parseInt(vehiclePrice)<500000){/*Checking condition where high should be medium should be greater then 200000 and low then 500000*/
                                            String info[] ={vehicleId,vehicleName,vehicleCC,category,vehiclePrice,vehicleRange};
                                            addToTable(info);
                                            ClearBtnActionPerformed(evt);
                                            JOptionPane.showMessageDialog(rootPane, " Registered Sucessfull", "Vehicle Entry", 1);
                                        }else{
                                            Toolkit.getDefaultToolkit().beep();
                                            JOptionPane.showMessageDialog(rootPane, " Medium Range Vechile should have Price Between"+ num.convert(200000)+ " To" +num.convert(500000), "Vehicle Entry Error", 0);
                                            return;
                                        }}

                                        if(lowRange.isSelected()){// if user select range low radio buttom  this fuction //
                                            if(Integer.parseInt(vehiclePrice)>=5000 && Integer.parseInt(vehiclePrice)<200000){/*Checking condition where high should be low should be greater then 5000 and low then 200000*/
                                                String info[] ={vehicleId,vehicleName,vehicleCC,category,vehiclePrice,vehicleRange};
                                                addToTable(info);
                                                ClearBtnActionPerformed(evt);
                                                JOptionPane.showMessageDialog(rootPane, " Registered Sucessfull", "Vehicle Entry", 1);
                                            }else{
                                                Toolkit.getDefaultToolkit().beep();
                                                JOptionPane.showMessageDialog(rootPane, " Low Range Vechile should have Price Between"+num.convert(50000)+" To"+num.convert(200000),"Vehicle Entry Error", 0);
                                                return;
                                            }
                                        }
                                    }else{
                                        Toolkit.getDefaultToolkit().beep();
                                        JOptionPane.showMessageDialog(rootPane, " Please Insert Interger Value In Vehicle CC", "Vehicle Entry Error", 0);
                                    }
                                }else{
                                    Toolkit.getDefaultToolkit().beep();
                                    JOptionPane.showMessageDialog(rootPane, " Please Insert Interger Value In Vehicle price","Vehicle Entry Error", 0);
                                }
                        
                             }else{
                                Toolkit.getDefaultToolkit().beep();
                                JOptionPane.showMessageDialog(rootPane, " Please Insert Interger Value In Vehicle ID","Vehicle Entry Error", 0);
                            }
                            }else{
                                Toolkit.getDefaultToolkit().beep();
                                JOptionPane.showMessageDialog(rootPane, "Negetive Integer Value Should not be Added", "Vehicle Entry Error", 0);
                            }
                            }else{
                                Toolkit.getDefaultToolkit().beep();
                                JOptionPane.showMessageDialog(rootPane, "Select Any One Range","Vehicle Entry Error", 0);
                            }
                            }else{
                                Toolkit.getDefaultToolkit().beep();
                                JOptionPane.showMessageDialog(rootPane, "Fill all Field", "Vehicle Entry Error", 0);
                        
                    }
                
            
        }catch(NumberFormatException e){
             JOptionPane.showMessageDialog(rootPane, "Fill all Field","Vehicle Entry Error", 0);
             
        }
    }//GEN-LAST:event_addVehicleEntryBtnActionPerformed
    /*This Function is responsible for replacing value with empty*/
    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        // TODO add your handling code here:
        vehicleIdField.setText("");
        vehicleNameField.setText("");
        vehicleCCField.setText("");
        vehiclePriceField.setText("");
        rangeGroup.clearSelection();
       
    }//GEN-LAST:event_ClearBtnActionPerformed
    /*This function is responsible for adding data into table and csv*/
    public void addToTable(String[]addList){
        RegisterData data = new RegisterData(addList[0],addList[1],addList[2],addList[3],Integer.parseInt(addList[4]),addList[5]);
        list.add(data);
        int nextRow =0;
        int rowCount=vehicleTable.getRowCount();
        int columnCount=vehicleTable.getColumnCount();
        boolean emptyRowFlag= false;
        String s;
        
        do{
            s=(String) vehicleTable.getValueAt(nextRow, 0);
            if(s!=null && s.length()!=0){
                nextRow++;
            }else{
                emptyRowFlag=true;/* emptyRowFlag will be true when empty row is found into the table*/
            }
        }while(nextRow<rowCount && !emptyRowFlag);
        if(nextRow<rowCount){
            for(int i=0;i<columnCount;i++){
               vehicleTable.setValueAt(addList[i],nextRow, i);
               insert=false;
               /* inserting value into the table when it found the empty row*/
            }
        }
        loadToCsv();
    }
    /*This function is for price search of particular vehicle*/
    private void priceSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchBtnActionPerformed
            NumberToWords num = new NumberToWords();
        
            try{
             String searchPrice = priceSearchField.getText();
        clearSearchPrice();
        if(Integer.parseInt(searchPrice)>0){
        if(!searchPrice.isEmpty()){/*Checking whether search price text field is empty or not*/
            if(Pattern.compile("\\b[0-9]+\\b").matcher(searchPrice).matches()){/*Validating by regex for only accepting interger*/
                mergeSort(list);/* Passing Array List values into the merge sort before binary search*/
                int result = binarySearch(list,0,list.size()-1,Integer.parseInt(searchPrice));/* Calling binary search function and receiving the index of value*/
                if(result == -1){/*if loop will execute then no vehicle is available of that price*/
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(rootPane, " No Vehicle is Available in this Price", "Table Price Search", 0);
                }
                else if(vehicleTable.getRowCount()==0){/*if loop will execute when table empty*/
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(rootPane, " No Register of Any Vehile", "Price Search Error", 0);
                }else{/* Else will work when vehicle is found at that price range */
                    JOptionPane.showMessageDialog(rootPane, " **Search Price Vehicle Details**\n"+"Vehicle Id:"+list.get(result).getVehicleId()+"\n"+
                        "Vehicle Name:"+list.get(result).getVehicleName()+"\n"+
                        "Vehicle CC:"+list.get(result).getVehicleCC()+"\n"+
                        "Category:"+list.get(result).getCategory()+"\n"+
                        "Price:"+list.get(result).getPrice()+" OR "+num.convert(list.get(result).getPrice())+"\n"+
                        "Range:"+list.get(result).getRange(), "Avaible Vehicle Details of Price", 1);

                }

            }else{
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(rootPane, " Please Insert Interger Value", "Search For Price Error", 0);
                return;
            }
        }else{
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, " Please fill the price ", "Search for Price Error", 0);
            return;}
        }else{
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, " Negative Value Is Not Accepted ", "Search for Price Error", 0);
        }
            }catch(NumberFormatException e){
             Toolkit.getDefaultToolkit().beep();
             JOptionPane.showMessageDialog(rootPane, "Fill all Field", "Search For Price Error", 0);
             
        }
    }//GEN-LAST:event_priceSearchBtnActionPerformed
     /*Medium sentence place into range String when user select medium radioButton*/
    private void mediumRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumRangeActionPerformed
        // TODO add your handling code here:
        range = "Medium";
    }//GEN-LAST:event_mediumRangeActionPerformed
     /*Low sentence place into range String when user select low radioButton*/
    private void lowRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowRangeActionPerformed
        // TODO add your handling code here:
        range = "Low";
    }//GEN-LAST:event_lowRangeActionPerformed
    /*This function is searching vehicle according to their category*/
    private void categorySearchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categorySearchBTNActionPerformed
        // TODO add your handling code here:
        String searchCategory = searchCategoryBox.getSelectedItem().toString();
        NumberToWords num = new NumberToWords();
        int count=0;

        for(int i=0 ;i<=list.size()-1;i++){
            if(searchCategory.equals(list.get(i).getCategory())){/*if search category match with category on list*/
                count++;/*Counting number of vehicle for particular category*/
                categoryList.add(list.get(i).getVehicleName());/*Adding vehicle name name of search category into the categoryList*/

            }
        }
        if(count==0){/*if count is zero then no vechile is available at that category*/
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, "There are no vehicle available of category "+searchCategory, "Catergory Search Error", 0);
        }
        else{/*else will execute when search category is found and display in Message Dialog*/
            JOptionPane.showMessageDialog(rootPane, "The Search category is "+searchCategory+"\n"+
                "There are"+num.convert(count)+" "+searchCategory+" named: "+"\n"+categoryListItems(), "Category Search", 1);
            categoryList.clear();
        }
    }//GEN-LAST:event_categorySearchBTNActionPerformed
       /*This function will execute when user click into Help Menu which open new frame of instruction*/
    private void helpMainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMainMenuMouseClicked
        // TODO add your handling code here:
        HelpGui gui = new HelpGui();
        gui.setVisible(true);/*Setting GUI visible*/
    }//GEN-LAST:event_helpMainMenuMouseClicked
    /*This fucntion will search vehicle information according to range*/
    private void rangeSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeSearchBtnActionPerformed
        // TODO add your handling code here:
        if(searchHighRadio.isSelected() || searchMediumRadio.isSelected() || searchLowRadio.isSelected()){/*Validating wheather range radio buttom is selected or not*/
        String range = searchRange;
        int count =0;
        NumberToWords num = new NumberToWords();
        
        for(int i=0; i<=list.size()-1;i++){
            if(searchRange.equals(list.get(i).getRange())){/*if search range match with range on list*/
                count++;/*Counting number of vehicle for particular range*/
                rangeList.add(list.get(i).getVehicleName());/*Adding vehicle name name of search range into the rangeList*/
                
            }
        }
        if(count==0){/*if count is zero then no vechile is available at that range*/
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, "There are no vehicle available of category "+searchRange, "Range Search Error", 0);
        }
        else{/*else will execute when search range is found and display in Message Dialog*/
            JOptionPane.showMessageDialog(rootPane, "The Search range is "+searchRange+"\n"+
                "There are"+num.convert(count)+" "+searchRange+" Range Vehicle"+" named: "+"\n"+rangeListItems(), "Range Search", 1);
            rangeList.clear();
            searchRangeGroup.clearSelection();
        }
        }else{
             Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(rootPane, "Select one of radio bottom ", "Range Search Error", 0);
        }
        
    }//GEN-LAST:event_rangeSearchBtnActionPerformed
     /*High sentence place into searchRange String when user select High radioButton*/
    private void searchHighRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchHighRadioActionPerformed
        // TODO add your handling code here:
        searchRange = "High";
    }//GEN-LAST:event_searchHighRadioActionPerformed
    /*Medium sentence place into searchRange String when user select Medium radioButton*/
    private void searchMediumRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMediumRadioActionPerformed
        // TODO add your handling code here:
        searchRange = "Medium";
    }//GEN-LAST:event_searchMediumRadioActionPerformed
    /*Low sentence place into searchRange String when user select Low radioButton*/
    private void searchLowRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchLowRadioActionPerformed
        // TODO add your handling code here:
        searchRange="Low";
    }//GEN-LAST:event_searchLowRadioActionPerformed
    /*Function to cleat the text field of Search Price Text Field*/
    private void clearSearchPrice(){
        priceSearchField.setText("");
    }    
    /* Function for inserting whole categoryList value(Vehicle Name) into String items */
    private String categoryListItems(){
        String items ="";
        for(int i=0; i<=categoryList.size()-1;i++){
            items = items+categoryList.get(i)+"\n";
        }
        return items;
    }
    /* Function for inserting whole rangeList value(Vehicle Name) into String items */
    private String rangeListItems(){
                String items ="";
        for(int i=0; i<=rangeList.size()-1;i++){
            items = items+rangeList.get(i)+"\n";
        }
        return items;
    }
    /*Function for loading values into the CSV File*/
    private void loadToCsv(){
        try{
        File file = new File("RegisterData.csv");
        if(!file.isFile()){/*Creating wheather CSV File is created or not*/
            file.createNewFile();/*Creating the CSV New File*/
        }
        FileWriter write = new FileWriter(file);
        for(RegisterData r:list){
            String data[] ={r.getVehicleId(),r.getVehicleName(),r.getVehicleCC(),r.getCategory(),Long.toString(r.getPrice()),r.getRange()};
            for(int i=0;i<data.length;i++){
                write.append(data[i]);/*Inserting Values into the CSV File*/
                if(i== data.length-1){
                    break;
                }
                write.append(",");
        }
            write.append("\n");
        }
        write.flush();/*Closing the File*/
        write.close();
        }catch(IOException e){}
    }
    /*This function is for Binary Search*/
    private static int binarySearch(ArrayList<RegisterData> list,int low, int high, int searchNum){
        if(low<=high){
            int mid=(low+high)/2;
            if(list.get(mid).getPrice()== searchNum){/*Checking whether middle list value match with search value*/
                return mid;
            }
            if(list.get(mid).getPrice()>searchNum){/*Checking whether middle list value is greater then search value*/
                return binarySearch(list,low,mid-1,searchNum);
            }else{/*Else middle list value is Smaller then search value*/
                return binarySearch(list,mid+1,high,searchNum);
            }
        }else{
            return -1;/*return -1 if search values is not found*/
        }
    }
    /*This function is for Merge Sort*/
    private void mergeSort(ArrayList<RegisterData> list){
        if(list.size()<=1){/*Checking whether list size smaller then 0 or equal to 1*/
            return;
        }
        ArrayList<RegisterData> first = new ArrayList();/*Creating ArrayList for storing the sperating values*/
        ArrayList<RegisterData> second = new ArrayList();/*Creating ArrayList for storing the sperating values*/
        
        for (int i=0 ; i<list.size()/2;i++){
            first.add(list.get(i));/*Adding the value into first ArrayList*/
        }
        for(int i=0 ; i<list.size()-first.size();i++){
            second.add(list.get(first.size()+i));/*Adding the value into Second ArrayList*/
        }
        mergeSort(first);/*Calling the same function(Recursion) untile size of Array List will be 1*/
        mergeSort(second);/*Calling the same function(Recursion) untile size of Array List will be 1*/
        merge(first,second,list);/*Calling function Merge For merging the values*/
        
    }
    /* Merging the values into the Array List with sorted order*/
    private void merge(ArrayList<RegisterData> first,ArrayList<RegisterData> second,ArrayList<RegisterData> list){
        int iFirst=0;
        int iSecond=0;
        int j=0;
        
        while(iFirst<first.size() && iSecond<second.size()){/*Checking the Size wheather iFirst and iSecons Size is smalller then first and second ArrayList*/
            if(first.get(iFirst).getPrice()<second.get(iSecond).getPrice()){/* Checking the price value from two Array list */
                list.set(j, first.get(iFirst));//*Setting the first Array List values into list */
                iFirst++;
            }else{
                list.set(j, second.get(iSecond));//*Setting the second Array List values into list */
                iSecond++;
            }
            j++;/* j is for indexing(pointer) the list and is increase when when one index is filled */
        }
        while(iFirst<first.size()){/*This wile loop is excute when there are any remaining values which are not set into the list*/
            list.set(j, first.get(iFirst));
            iFirst++;
            j++;
        }
        while(iSecond<second.size()){/*This wile loop is excute when there are any remaining values which are not set into the list*/
             list.set(j, second.get(iSecond));
                iSecond++;
                j++;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AppliancesInfo obj = new AppliancesInfo();
                obj.setVisible(true);
                int confirm =JOptionPane.showConfirmDialog(null, "Do Want To import OLD File? ","Confirmation",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(confirm == JOptionPane.YES_NO_OPTION){
                    obj.loadFile();
                }else if(confirm == JOptionPane.CANCEL_OPTION){
                         System.exit(0);
        }
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CategoryLabel;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JPanel JTablePanel;
    private javax.swing.JLabel VehicleIDLabel;
    private javax.swing.JLabel VehicleNameLabel;
    private javax.swing.JButton addVehicleEntryBtn;
    private javax.swing.JButton categorySearchBTN;
    private javax.swing.JMenuItem exitMenuIteam;
    private javax.swing.JMenuBar fileMainMenu;
    private javax.swing.JMenu helpMainMenu;
    private javax.swing.JRadioButton highRange;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton lowRange;
    private javax.swing.JRadioButton mediumRange;
    private javax.swing.JMenu openMenuItem;
    private javax.swing.JMenuItem openMenuItems;
    private javax.swing.JButton priceSearchBtn;
    private javax.swing.JTextField priceSearchField;
    private javax.swing.ButtonGroup rangeGroup;
    private javax.swing.JButton rangeSearchBtn;
    private javax.swing.JPanel seachByCategoryPanel;
    private javax.swing.JPanel searchByPricePanel;
    private javax.swing.JPanel searchByRangePanel;
    private javax.swing.JComboBox<String> searchCategoryBox;
    private javax.swing.JRadioButton searchHighRadio;
    private javax.swing.JRadioButton searchLowRadio;
    private javax.swing.JRadioButton searchMediumRadio;
    private javax.swing.ButtonGroup searchRangeGroup;
    private javax.swing.JTextField vehicleCCField;
    private javax.swing.JLabel vehicleCCLabel;
    private javax.swing.JComboBox<String> vehicleCategory;
    private javax.swing.JPanel vehicleEntryPanel;
    private javax.swing.JTextField vehicleIdField;
    private javax.swing.JTextField vehicleNameField;
    private javax.swing.JTextField vehiclePriceField;
    private javax.swing.JTable vehicleTable;
    private javax.swing.JPanel wholeGUIpanel;
    // End of variables declaration//GEN-END:variables
}
